plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev.legacyforge' version '2.0.107'
    id 'net.darkhax.curseforgegradle' version '1.1.26'
    id 'com.modrinth.minotaur' version "2.+"
}

version = "${version}"
group = "${mod_group}"
base {
    archivesName = "${mod_archive_name}-${mc_version}"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

legacyForge {
    // Develop against MinecraftForge (the versions can be found at https://files.minecraftforge.net/)
    version = "${mc_version}-${forge_version}"

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.hasProperty("parchment_minecraft_version") ? project.parchment_minecraft_version : project.mc_version
    }

    // Validate AT files and raise errors when they have invalid targets
    // This option is false by default, but turning it on is recommended
    validateAccessTransformers = true

    if (file("src/main/resources/META-INF/accesstransformer.cfg").exists()) {
        accessTransformers.from "src/main/resources/META-INF/accesstransformer.cfg"
    }

    runs {
        client {
            client()
        }
        server {
            server()
        }
        data {
            data()
            programArguments.addAll(
                    '--mod', "${mod_id}",
                    '--all',
                    '--output', file('src/generated/resources/').getAbsolutePath(),
                    '--existing', file('src/main/resources/').getAbsolutePath()
            )
        }

        configureEach { run ->
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            jvmArgument '-Xmx4G'

            systemProperty("mixin.debug.export", "true")
            systemProperty("mixin.debug.verbose", "true")

            // Recommended logging level for the console
            systemProperty 'forge.logging.console.level', 'debug'
        }
    }

    mods {
        headlight {
            sourceSet sourceSets.main
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime' and a deobfuscating one called 'modLocalRuntime'
// These configurations should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}
obfuscation {
    createRemappingConfiguration(configurations.localRuntime)
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
    config "${mod_id}.compat.mixins.json"
}

repositories {
    maven {
        url = "https://maven.blamejared.com"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly "org.jetbrains:annotations:24.0.1"

    modCompileOnly("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    modCompileOnly("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")

    modLocalRuntime("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    modCompileOnly("curse.maven:sophisticated-core-618298:${sophisticated_core_version}")
    modLocalRuntime("curse.maven:sophisticated-core-618298:${sophisticated_core_version}")
    modLocalRuntime("curse.maven:sophisticated-backpacks-422301:${sophisticated_backpacks_version}")
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "Mrbysco",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Mrbysco",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json,${mod_id}.compat.mixins.json"
        ])
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version
            from components.java
        }
    }
    repositories {
        if (System.getenv().SAP_SECRET) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "mrbysco"
                    password = "${System.getenv().SAP_SECRET}"
                }
            }
        }
    }
}

if (System.getenv().CURSEFORGE_KEY) {
    task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        apiToken = System.getenv().CURSEFORGE_KEY

        def mainFile = upload(project.curseforge_id, reobfJar)
        mainFile.releaseType = 'release'
        mainFile.addModLoader("Forge", "NeoForge")
        mainFile.addGameVersion("${mc_version}")
        mainFile.addJavaVersion("Java 17")
        mainFile.addGameVersion('Server', 'Client')

        mainFile.changelog = file("$project.rootDir/changelog.md")
        mainFile.changelogType = 'markdown'
    }
}

if (System.getenv().MODRINTH_KEY) {
    modrinth {
        token = System.getenv().MODRINTH_KEY
        projectId = project.modrinth_id
        versionType = "release"
        versionName = "${mod_name} ${mc_version}"
        versionNumber = project.version
        uploadFile = reobfJar
        changelog = file("$project.rootDir/changelog.md").text
        gameVersions = ["${mc_version}"]
        loaders = ["neoforge", "forge"]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}